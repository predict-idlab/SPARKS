#!/usr/local/bin/python3.10
#import cgi, cgitb
#cgitb.enable()
import json
import kglab
import rdflib
from rdflib import URIRef
import requests

schemas = {"GB_PRODUCTIONLOG": URIRef("http://example.volvocars.net/ProductionSource"),
            "PRODUCTION_TRACKING_VCG":URIRef("http://example.volvocars.net/TrackingSource"),
            "GB_TEMP_CIP":URIRef("http://example.volvocars.net/StoSource"),
            "GB_TEST_SEQSTEP":URIRef("http://example.volvocars.net/SeqstepSource"),
            "GB_ROBVIEW":URIRef("http://example.volvocars.net/EventlogSource"),
            "ATACQ_VCG":URIRef("http://example.volvocars.net/AtacqSource")}

mapping = {"BodyNumber": URIRef('http://dynamicdashboard.ilabt.imec.be/broker/ontologies/metrics#quantity'), 
 "Description": URIRef('http://dynamicdashboard.ilabt.imec.be/broker/ontologies/metrics#string'), 
 "Source": URIRef('http://dynamicdashboard.ilabt.imec.be/broker/ontologies/metrics#string'),
 "Timestamp": URIRef('http://dynamicdashboard.ilabt.imec.be/broker/ontologies/metrics#string'),
"OFOUTKODE":URIRef('http://dynamicdashboard.ilabt.imec.be/broker/ontologies/metrics#string'), 
"STNModes":URIRef('http://dynamicdashboard.ilabt.imec.be/broker/ontologies/metrics#quantity'), 
"Code":URIRef('http://dynamicdashboard.ilabt.imec.be/broker/ontologies/metrics#string'), 
"FlowCode":URIRef('http://dynamicdashboard.ilabt.imec.be/broker/ontologies/metrics#quantity'), 
"Severity":URIRef('http://dynamicdashboard.ilabt.imec.be/broker/ontologies/metrics#quantity'),
"BodyType":URIRef('http://dynamicdashboard.ilabt.imec.be/broker/ontologies/metrics#quantity'), 
"Modes":URIRef('http://dynamicdashboard.ilabt.imec.be/broker/ontologies/metrics#string'), 
"PerfA1InCl":URIRef('http://dynamicdashboard.ilabt.imec.be/broker/ontologies/metrics#boolean'), 
"DBSTASTO":URIRef('http://dynamicdashboard.ilabt.imec.be/broker/ontologies/metrics#string'),
"FluidConsumption":URIRef('http://dynamicdashboard.ilabt.imec.be/broker/ontologies/metrics#quantity'),
"Title":URIRef('http://dynamicdashboard.ilabt.imec.be/broker/ontologies/metrics#string'),
"PerfA1OutCl":URIRef('http://dynamicdashboard.ilabt.imec.be/broker/ontologies/metrics#boolean'), 
"Registration":URIRef('http://dynamicdashboard.ilabt.imec.be/broker/ontologies/metrics#string'),
"Type":URIRef('http://dynamicdashboard.ilabt.imec.be/broker/ontologies/metrics#string'), 
"MtrlChangeOn":URIRef('http://dynamicdashboard.ilabt.imec.be/broker/ontologies/metrics#boolean'), 
"CavityCleaned":URIRef('http://dynamicdashboard.ilabt.imec.be/broker/ontologies/metrics#boolean'),
"TypemaskedBody":URIRef('http://dynamicdashboard.ilabt.imec.be/broker/ontologies/metrics#quantity'),
 "ItemCode":URIRef('http://dynamicdashboard.ilabt.imec.be/broker/ontologies/metrics#string'),
 "HistoricalDataSource":URIRef('http://dynamicdashboard.ilabt.imec.be/broker/ontologies/metrics#string')}

def main():
    #data = json.loads(cgi.FieldStorage()['param'].value)
    text = """
    {"last_node_id":63,"last_link_id":6,"nodes":[{"id":3,"type":"sparks/process","pos":[2250,50],"size":[500,175],"flags":{},"order":3,"mode":0,"inputs":[{"name":"Call_2_3","link":60}],"outputs":[{"name":"Out","links":null}],"title":"\\\"Robot04Safety\\\"()","description":"\\\"Robot04Safety\\\"()","properties":{"enabled":true,"id":0},"subgraph":{"last_node_id":57,"last_link_id":0,"nodes":[{"id":4,"type":"sparks/procedure","pos":[50,50],"size":[500,175],"flags":{},"order":0,"mode":0,"inputs":[{"name":"\\\"JR04F7KF1FB\\\""},{"name":"\\\"TRUE\\\""},{"name":"\\\"_247170\\\".GeneralResetPassivation"}],"outputs":[{"name":"L:0.0_network_1_","links":[],"slot_index":0},{"name":"L:0.1_network_1_","links":[],"slot_index":1},{"name":"L:0.2_network_1_","links":[],"slot_index":2},{"name":"Call_4_5","links":[47],"slot_index":3},{"name":"out","links":[33],"slot_index":4}],"title":"**** 2.2 Alarms - Alarm generation ****","description":"**** 2.2 Alarms - Alarm generation ****","properties":{"enabled":true,"id":0},"subgraph":{"last_node_id":0,"last_link_id":0,"nodes":[],"links":[],"groups":[],"config":{},"extra":{},"version":0.4}},{"id":6,"type":"sparks/procedure","pos":[600,50],"size":[500,175],"flags":{},"order":1,"mode":0,"inputs":[{"name":"\\\"JR04F7KF2FB\\\""},{"name":"\\\"TRUE\\\""},{"name":"\\\"_247170\\\".GeneralResetPassivation"},{"name":"in","link":33}],"outputs":[{"name":"L:0.0_network_2_","links":[],"slot_index":0},{"name":"L:0.1_network_2_","links":[],"slot_index":1},{"name":"L:0.2_network_2_","links":[],"slot_index":2},{"name":"Call_6_5","links":[48],"slot_index":3},{"name":"out","links":[34],"slot_index":4}],"title":"**** 2.2 Alarms - Alarm generation ****","description":"**** 2.2 Alarms - Alarm generation ****","properties":{"enabled":true,"id":0},"subgraph":{"last_node_id":0,"last_link_id":0,"nodes":[],"links":[],"groups":[],"config":{},"extra":{},"version":0.4}},{"id":7,"type":"sparks/procedure","pos":[1150,50],"size":[500,175],"flags":{},"order":2,"mode":0,"inputs":[{"name":"\\\"JR04F9KF1FB\\\""},{"name":"\\\"TRUE\\\""},{"name":"\\\"_247170\\\".GeneralResetPassivation"},{"name":"in","link":34}],"outputs":[{"name":"L:0.0_network_3_","links":[],"slot_index":0},{"name":"L:0.1_network_3_","links":[],"slot_index":1},{"name":"L:0.2_network_3_","links":[],"slot_index":2},{"name":"Call_7_5","links":[49],"slot_index":3},{"name":"out","links":[35],"slot_index":4}],"title":"**** 2.2 Alarms - Alarm generation ****","description":"**** 2.2 Alarms - Alarm generation ****","properties":{"enabled":true,"id":0},"subgraph":{"last_node_id":0,"last_link_id":0,"nodes":[],"links":[],"groups":[],"config":{},"extra":{},"version":0.4}},{"id":8,"type":"sparks/procedure","pos":[1700,50],"size":[500,175],"flags":{},"order":3,"mode":0,"inputs":[{"name":"\\\"JR04F7KF4FB\\\""},{"name":"\\\"TRUE\\\""},{"name":"\\\"_247170\\\".GeneralResetPassivation"},{"name":"in","link":35}],"outputs":[{"name":"L:0.0_network_4_","links":[],"slot_index":0},{"name":"L:0.1_network_4_","links":[],"slot_index":1},{"name":"L:0.2_network_4_","links":[],"slot_index":2},{"name":"Call_8_5","links":[50],"slot_index":3},{"name":"out","links":[36],"slot_index":4}],"title":"**** 2.2 Alarms - Alarm generation ****","description":"**** 2.2 Alarms - Alarm generation ****","properties":{"enabled":true,"id":0},"subgraph":{"last_node_id":0,"last_link_id":0,"nodes":[],"links":[],"groups":[],"config":{},"extra":{},"version":0.4}},{"id":9,"type":"sparks/procedure","pos":[2250,50],"size":[500,175],"flags":{},"order":4,"mode":0,"inputs":[{"name":"\\\"JR04F7KF5FB\\\""},{"name":"\\\"TRUE\\\""},{"name":"\\\"_247170\\\".GeneralResetPassivation"},{"name":"in","link":36}],"outputs":[{"name":"L:0.0_network_5_","links":[],"slot_index":0},{"name":"L:0.1_network_5_","links":[],"slot_index":1},{"name":"L:0.2_network_5_","links":[],"slot_index":2},{"name":"Call_9_5","links":[51],"slot_index":3},{"name":"out","links":[37],"slot_index":4}],"title":"**** 2.2 Alarms - Alarm generation ****","description":"**** 2.2 Alarms - Alarm generation ****","properties":{"enabled":true,"id":0},"subgraph":{"last_node_id":0,"last_link_id":0,"nodes":[],"links":[],"groups":[],"config":{},"extra":{},"version":0.4}},{"id":10,"type":"sparks/procedure","pos":[2800,50],"size":[500,175],"flags":{},"order":5,"mode":0,"inputs":[{"name":"\\\"JR04F7KF6FB\\\""},{"name":"\\\"TRUE\\\""},{"name":"\\\"_247170\\\".GeneralResetPassivation"},{"name":"in","link":37}],"outputs":[{"name":"L:0.0_network_6_","links":[],"slot_index":0},{"name":"L:0.1_network_6_","links":[],"slot_index":1},{"name":"L:0.2_network_6_","links":[],"slot_index":2},{"name":"Call_10_5","links":[52],"slot_index":3},{"name":"out","links":[38],"slot_index":4}],"title":"**** 2.2 Alarms - Alarm generation ****","description":"**** 2.2 Alarms - Alarm generation ****","properties":{"enabled":true,"id":0},"subgraph":{"last_node_id":0,"last_link_id":0,"nodes":[],"links":[],"groups":[],"config":{},"extra":{},"version":0.4}},{"id":11,"type":"sparks/procedure","pos":[3350,50],"size":[500,175],"flags":{},"order":6,"mode":0,"inputs":[{"name":"\\\"JR04F7KF7FB\\\""},{"name":"\\\"TRUE\\\""},{"name":"\\\"_247170\\\".GeneralResetPassivation"},{"name":"in","link":38}],"outputs":[{"name":"L:0.0_network_7_","links":[],"slot_index":0},{"name":"L:0.1_network_7_","links":[],"slot_index":1},{"name":"L:0.2_network_7_","links":[],"slot_index":2},{"name":"Call_11_5","links":[53],"slot_index":3},{"name":"out","links":[39],"slot_index":4}],"title":"**** 2.2 Alarms - Alarm generation ****","description":"**** 2.2 Alarms - Alarm generation ****","properties":{"enabled":true,"id":0},"subgraph":{"last_node_id":0,"last_link_id":0,"nodes":[],"links":[],"groups":[],"config":{},"extra":{},"version":0.4}},{"id":12,"type":"sparks/procedure","pos":[3900,50],"size":[500,175],"flags":{},"order":7,"mode":0,"inputs":[{"name":"\\\"JR04F7KF8FB\\\""},{"name":"\\\"TRUE\\\""},{"name":"\\\"_247170\\\".GeneralResetPassivation"},{"name":"in","link":39}],"outputs":[{"name":"L:0.0_network_8_","links":[],"slot_index":0},{"name":"L:0.1_network_8_","links":[],"slot_index":1},{"name":"L:0.2_network_8_","links":[],"slot_index":2},{"name":"Call_12_5","links":[54],"slot_index":3},{"name":"out","links":[40],"slot_index":4}],"title":"**** 2.2 Alarms - Alarm generation ****","description":"**** 2.2 Alarms - Alarm generation ****","properties":{"enabled":true,"id":0},"subgraph":{"last_node_id":0,"last_link_id":0,"nodes":[],"links":[],"groups":[],"config":{},"extra":{},"version":0.4}},{"id":13,"type":"sparks/procedure","pos":[4450,50],"size":[500,345],"flags":{},"order":9,"mode":0,"inputs":[{"name":"\\\"TRUE\\\""},{"name":"\\\"FALSE\\\""},{"name":"\\\"_Robot04Safety\\\".AlarmA"},{"name":"\\\"_Robot04Safety\\\".AlarmB"},{"name":"\\\"_Robot04Safety\\\".AlarmC"},{"name":"\\\"_Robot04Safety\\\".AlarmD"},{"name":"in","link":40}],"outputs":[{"name":"L:0.0_network_9_","links":[],"slot_index":0},{"name":"L:0.1_network_9_","links":[],"slot_index":1},{"name":"L:0.2_network_9_","links":[],"slot_index":2},{"name":"L:0.3_network_9_","links":[],"slot_index":3},{"name":"L:0.4_network_9_","links":[],"slot_index":4},{"name":"L:0.5_network_9_","links":[],"slot_index":5},{"name":"L:0.6_network_9_","links":[],"slot_index":6},{"name":"L:0.7_network_9_","links":[],"slot_index":7},{"name":"L:1.0_network_9_","links":[],"slot_index":8},{"name":"L:1.1_network_9_","links":[],"slot_index":9},{"name":"L:1.2_network_9_","links":[],"slot_index":10},{"name":"L:1.3_network_9_","links":[],"slot_index":11},{"name":"L:1.4_network_9_","links":[],"slot_index":12},{"name":"Call_13_14","links":[55],"slot_index":13},{"name":"out","links":[41],"slot_index":14}],"title":"**** 4.6 Machine status - Indications ****","description":"**** 4.6 Machine status - Indications ****","properties":{"enabled":true,"id":0},"subgraph":{"last_node_id":0,"last_link_id":0,"nodes":[],"links":[],"groups":[],"config":{},"extra":{},"version":0.4}},{"id":33,"type":"sparks/procedure","pos":[5000,50],"size":[500,414],"flags":{},"order":11,"mode":0,"inputs":[{"name":"\\\"JR04F7KF9\\\""},{"name":"\\\"JR04F7KF10\\\""},{"name":"\\\"FALSE\\\""},{"name":"in","link":41}],"outputs":[{"name":"L:0.0_network_10_","links":[],"slot_index":0},{"name":"L:0.1_network_10_","links":[],"slot_index":1},{"name":"L:0.2_network_10_","links":[],"slot_index":2},{"name":"L:0.3_network_10_","links":[],"slot_index":3},{"name":"L:0.4_network_10_","links":[],"slot_index":4},{"name":"L:0.5_network_10_","links":[],"slot_index":5},{"name":"L:0.6_network_10_","links":[],"slot_index":6},{"name":"L:0.7_network_10_","links":[],"slot_index":7},{"name":"L:1.0_network_10_","links":[],"slot_index":8},{"name":"L:1.1_network_10_","links":[],"slot_index":9},{"name":"L:1.2_network_10_","links":[],"slot_index":10},{"name":"L:1.3_network_10_","links":[],"slot_index":11},{"name":"L:1.4_network_10_","links":[],"slot_index":12},{"name":"L:1.5_network_10_","links":[],"slot_index":13},{"name":"L:1.6_network_10_","links":[],"slot_index":14},{"name":"L:1.7_network_10_","links":[],"slot_index":15},{"name":"Call_33_34","links":[56],"slot_index":16},{"name":"out","links":[42],"slot_index":17}],"title":"**** 4.6 - Machine status - Indications ****","description":"**** 4.6 - Machine status - Indications ****","properties":{"enabled":true,"id":0},"subgraph":{"last_node_id":0,"last_link_id":0,"nodes":[],"links":[],"groups":[],"config":{},"extra":{},"version":0.4}},{"id":53,"type":"sparks/procedure","pos":[5550,50],"size":[500,207],"flags":{},"order":13,"mode":0,"inputs":[{"name":"\\\"_Robot04Safety\\\".JR04F7KF1FBAlmCond"},{"name":"\\\"_Robot04Safety\\\".JR04F7KF2FBAlmCond"},{"name":"\\\"_Robot04Safety\\\".JR04F9KF1FBAlmCond"},{"name":"\\\"_Robot04Safety\\\".JR04F7KF4FBAlmCond"},{"name":"\\\"_Robot04Safety\\\".JR04F7KF5FBAlmCond"},{"name":"\\\"_Robot04Safety\\\".JR04F7KF6FBAlmCond"},{"name":"\\\"_Robot04Safety\\\".JR04F7KF7FBAlmCond"},{"name":"\\\"_Robot04Safety\\\".JR04F7KF8FBAlmCond"},{"name":"in","link":42}],"outputs":[{"name":"\\\"Robot04Safety\\\".O_AlmCond","links":[],"slot_index":0},{"name":"out","links":[43],"slot_index":1}],"title":"**** 8 - Outputs ****","description":"**** 8 - Outputs ****","properties":{"enabled":true,"id":0},"subgraph":{"last_node_id":0,"last_link_id":0,"nodes":[],"links":[],"groups":[],"config":{},"extra":{},"version":0.4}},{"id":54,"type":"sparks/procedure","pos":[500,550],"size":[500,207],"flags":{},"order":14,"mode":0,"inputs":[{"name":"\\\"_Robot04Safety\\\".AA_JR04F7KF1FB"},{"name":"\\\"_Robot04Safety\\\".AA_JR04F7KF2FB"},{"name":"\\\"_Robot04Safety\\\".AA_JR04F9KF1FB"},{"name":"\\\"_Robot04Safety\\\".AA_JR04F7KF4FB"},{"name":"\\\"_Robot04Safety\\\".AA_JR04F7KF5FB"},{"name":"\\\"_Robot04Safety\\\".AA_JR04F7KF6FB"},{"name":"\\\"_Robot04Safety\\\".AA_JR04F7KF7FB"},{"name":"\\\"_Robot04Safety\\\".AA_JR04F7KF8FB"},{"name":"in","link":43}],"outputs":[{"name":"\\\"_Robot04Safety\\\".AlarmA","links":[],"slot_index":0},{"name":"\\\"Robot04Safety\\\".O_AlarmA","links":[],"slot_index":1},{"name":"out","links":[44],"slot_index":2}],"title":"**** 9 - Alarm Summary ****","description":"**** 9 - Alarm Summary ****","properties":{"enabled":true,"id":0},"subgraph":{"last_node_id":0,"last_link_id":0,"nodes":[],"links":[],"groups":[],"config":{},"extra":{},"version":0.4}},{"id":55,"type":"sparks/procedure","pos":[1050,550],"size":[500,175],"flags":{},"order":15,"mode":0,"inputs":[{"name":"\\\"FALSE\\\""},{"name":"in","link":44}],"outputs":[{"name":"\\\"_Robot04Safety\\\".AlarmB","links":[],"slot_index":0},{"name":"\\\"Robot04Safety\\\".O_AlarmB","links":[],"slot_index":1},{"name":"out","links":[45],"slot_index":2}],"title":"**** 9 - Alarm Summary ****","description":"**** 9 - Alarm Summary ****","properties":{"enabled":true,"id":0},"subgraph":{"last_node_id":0,"last_link_id":0,"nodes":[],"links":[],"groups":[],"config":{},"extra":{},"version":0.4}},{"id":56,"type":"sparks/procedure","pos":[1600,550],"size":[500,175],"flags":{},"order":16,"mode":0,"inputs":[{"name":"\\\"FALSE\\\""},{"name":"in","link":45}],"outputs":[{"name":"\\\"_Robot04Safety\\\".AlarmC","links":[],"slot_index":0},{"name":"\\\"Robot04Safety\\\".O_AlarmC","links":[],"slot_index":1},{"name":"out","links":[46],"slot_index":2}],"title":"**** 9 - Alarm Summary ****","description":"**** 9 - Alarm Summary ****","properties":{"enabled":true,"id":0},"subgraph":{"last_node_id":0,"last_link_id":0,"nodes":[],"links":[],"groups":[],"config":{},"extra":{},"version":0.4}},{"id":57,"type":"sparks/procedure","pos":[2150,550],"size":[500,175],"flags":{},"order":17,"mode":0,"inputs":[{"name":"\\\"FALSE\\\""},{"name":"in","link":46}],"outputs":[{"name":"\\\"_Robot04Safety\\\".AlarmD","links":[],"slot_index":0},{"name":"\\\"Robot04Safety\\\".O_AlarmD","links":[],"slot_index":1}],"title":"**** 9 - Alarm Summary ****","description":"**** 9 - Alarm Summary ****","properties":{"enabled":true,"id":0},"subgraph":{"last_node_id":0,"last_link_id":0,"nodes":[],"links":[],"groups":[],"config":{},"extra":{},"version":0.4}},{"id":5,"type":"sparks/process","pos":[2700,550],"size":[500,184],"flags":{},"order":8,"mode":0,"inputs":[{"name":"Call_4_5","link":47},{"name":"Call_6_5","link":48},{"name":"Call_7_5","link":49},{"name":"Call_8_5","link":50},{"name":"Call_9_5","link":51},{"name":"Call_10_5","link":52},{"name":"Call_11_5","link":53},{"name":"Call_12_5","link":54}],"outputs":[{"name":"Out","links":null}],"title":"\\\"L1SafetyFbkAlarm\\\"(\\\"_JR04F7KF1FB\\\")","description":"\\\"L1SafetyFbkAlarm\\\"(\\\"_JR04F7KF1FB\\\")","properties":{"enabled":true,"id":0},"subgraph":{"last_node_id":0,"last_link_id":0,"nodes":[],"links":[],"groups":[],"config":{},"extra":{},"version":0.4}},{"id":14,"type":"sparks/process","pos":[3250,550],"size":[500,175],"flags":{},"order":10,"mode":0,"inputs":[{"name":"Call_13_14","link":55}],"outputs":[{"name":"Out","links":null}],"title":"\\\"LFCAnim\\\"()","description":"\\\"LFCAnim\\\"()","properties":{"enabled":true,"id":0},"subgraph":{"last_node_id":31,"last_link_id":0,"nodes":[{"id":15,"type":"sparks/procedure","pos":[50,50],"size":[500,175],"flags":{},"order":0,"mode":0,"inputs":[{"name":"\\\"LFCAnim\\\".I_SetPos"}],"outputs":[{"name":"L:1.0_network_1_","links":[],"slot_index":0},{"name":"out","links":[1],"slot_index":1}],"title":"**** 1 - Inputs ****","description":"**** 1 - Inputs ****","properties":{"enabled":true,"id":0},"subgraph":{"last_node_id":0,"last_link_id":0,"nodes":[],"links":[],"groups":[],"config":{},"extra":{},"version":0.4}},{"id":16,"type":"sparks/procedure","pos":[600,50],"size":[500,175],"flags":{},"order":1,"mode":0,"inputs":[{"name":"\\\"LFCAnim\\\".I_ResetPos"},{"name":"in","link":1}],"outputs":[{"name":"L:1.1_network_2_","links":[],"slot_index":0},{"name":"out","links":[2],"slot_index":1}],"title":"**** 1 - Inputs ****","description":"**** 1 - Inputs ****","properties":{"enabled":true,"id":0},"subgraph":{"last_node_id":0,"last_link_id":0,"nodes":[],"links":[],"groups":[],"config":{},"extra":{},"version":0.4}},{"id":17,"type":"sparks/procedure","pos":[1150,50],"size":[500,175],"flags":{},"order":2,"mode":0,"inputs":[{"name":"\\\"LFCAnim\\\".I_Active"},{"name":"in","link":2}],"outputs":[{"name":"L:1.2_network_3_","links":[],"slot_index":0},{"name":"out","links":[3],"slot_index":1}],"title":"**** 1 - Inputs ****","description":"**** 1 - Inputs ****","properties":{"enabled":true,"id":0},"subgraph":{"last_node_id":0,"last_link_id":0,"nodes":[],"links":[],"groups":[],"config":{},"extra":{},"version":0.4}},{"id":18,"type":"sparks/procedure","pos":[1700,50],"size":[500,175],"flags":{},"order":3,"mode":0,"inputs":[{"name":"\\\"LFCAnim\\\".I_Invisible"},{"name":"in","link":3}],"outputs":[{"name":"L:1.3_network_4_","links":[],"slot_index":0},{"name":"out","links":[4],"slot_index":1}],"title":"**** 1 - Inputs ****","description":"**** 1 - Inputs ****","properties":{"enabled":true,"id":0},"subgraph":{"last_node_id":0,"last_link_id":0,"nodes":[],"links":[],"groups":[],"config":{},"extra":{},"version":0.4}},{"id":19,"type":"sparks/procedure","pos":[2250,50],"size":[500,175],"flags":{},"order":4,"mode":0,"inputs":[{"name":"\\\"LFCAnim\\\".I_OutOfUse"},{"name":"in","link":4}],"outputs":[{"name":"L:1.4_network_5_","links":[],"slot_index":0},{"name":"out","links":[5],"slot_index":1}],"title":"**** 1 - Inputs ****","description":"**** 1 - Inputs ****","properties":{"enabled":true,"id":0},"subgraph":{"last_node_id":0,"last_link_id":0,"nodes":[],"links":[],"groups":[],"config":{},"extra":{},"version":0.4}},{"id":20,"type":"sparks/procedure","pos":[2800,50],"size":[500,175],"flags":{},"order":5,"mode":0,"inputs":[{"name":"\\\"LFCAnim\\\".I_IntlkSet"},{"name":"in","link":5}],"outputs":[{"name":"L:1.5_network_6_","links":[],"slot_index":0},{"name":"out","links":[6],"slot_index":1}],"title":"**** 1 - Inputs ****","description":"**** 1 - Inputs ****","properties":{"enabled":true,"id":0},"subgraph":{"last_node_id":0,"last_link_id":0,"nodes":[],"links":[],"groups":[],"config":{},"extra":{},"version":0.4}},{"id":21,"type":"sparks/procedure","pos":[3350,50],"size":[500,175],"flags":{},"order":6,"mode":0,"inputs":[{"name":"\\\"LFCAnim\\\".I_IntlkReset"},{"name":"in","link":6}],"outputs":[{"name":"L:1.6_network_7_","links":[],"slot_index":0},{"name":"out","links":[7],"slot_index":1}],"title":"**** 1 - Inputs ****","description":"**** 1 - Inputs ****","properties":{"enabled":true,"id":0},"subgraph":{"last_node_id":0,"last_link_id":0,"nodes":[],"links":[],"groups":[],"config":{},"extra":{},"version":0.4}},{"id":22,"type":"sparks/procedure","pos":[3900,50],"size":[500,175],"flags":{},"order":7,"mode":0,"inputs":[{"name":"\\\"LFCAnim\\\".I_IntlkSetAlm"},{"name":"in","link":7}],"outputs":[{"name":"L:1.7_network_8_","links":[],"slot_index":0},{"name":"out","links":[8],"slot_index":1}],"title":"**** 1 - Inputs ****","description":"**** 1 - Inputs ****","properties":{"enabled":true,"id":0},"subgraph":{"last_node_id":0,"last_link_id":0,"nodes":[],"links":[],"groups":[],"config":{},"extra":{},"version":0.4}},{"id":23,"type":"sparks/procedure","pos":[4450,50],"size":[500,175],"flags":{},"order":8,"mode":0,"inputs":[{"name":"\\\"LFCAnim\\\".I_IntlkResetAlm"},{"name":"in","link":8}],"outputs":[{"name":"L:0.0_network_9_","links":[],"slot_index":0},{"name":"out","links":[9],"slot_index":1}],"title":"**** 1 - Inputs ****","description":"**** 1 - Inputs ****","properties":{"enabled":true,"id":0},"subgraph":{"last_node_id":0,"last_link_id":0,"nodes":[],"links":[],"groups":[],"config":{},"extra":{},"version":0.4}},{"id":24,"type":"sparks/procedure","pos":[5000,50],"size":[500,175],"flags":{},"order":9,"mode":0,"inputs":[{"name":"\\\"FALSE\\\""},{"name":"in","link":9}],"outputs":[{"name":"L:0.1_network_10_","links":[],"slot_index":0},{"name":"out","links":[10],"slot_index":1}],"title":"**** 1 - Inputs ****","description":"**** 1 - Inputs ****","properties":{"enabled":true,"id":0},"subgraph":{"last_node_id":0,"last_link_id":0,"nodes":[],"links":[],"groups":[],"config":{},"extra":{},"version":0.4}},{"id":25,"type":"sparks/procedure","pos":[5550,50],"size":[500,175],"flags":{},"order":10,"mode":0,"inputs":[{"name":"\\\"FALSE\\\""},{"name":"in","link":10}],"outputs":[{"name":"L:0.2_network_11_","links":[],"slot_index":0},{"name":"out","links":[11],"slot_index":1}],"title":"**** 1 - Inputs ****","description":"**** 1 - Inputs ****","properties":{"enabled":true,"id":0},"subgraph":{"last_node_id":0,"last_link_id":0,"nodes":[],"links":[],"groups":[],"config":{},"extra":{},"version":0.4}},{"id":26,"type":"sparks/procedure","pos":[500,550],"size":[500,175],"flags":{},"order":11,"mode":0,"inputs":[{"name":"\\\"FALSE\\\""},{"name":"in","link":11}],"outputs":[{"name":"L:0.3_network_12_","links":[],"slot_index":0},{"name":"out","links":[12],"slot_index":1}],"title":"**** 1 - Inputs ****","description":"**** 1 - Inputs ****","properties":{"enabled":true,"id":0},"subgraph":{"last_node_id":0,"last_link_id":0,"nodes":[],"links":[],"groups":[],"config":{},"extra":{},"version":0.4}},{"id":27,"type":"sparks/procedure","pos":[1050,550],"size":[500,175],"flags":{},"order":12,"mode":0,"inputs":[{"name":"\\\"LFCAnim\\\".I_AlarmA"},{"name":"in","link":12}],"outputs":[{"name":"L:0.4_network_13_","links":[],"slot_index":0},{"name":"out","links":[13],"slot_index":1}],"title":"**** 1 - Inputs ****","description":"**** 1 - Inputs ****","properties":{"enabled":true,"id":0},"subgraph":{"last_node_id":0,"last_link_id":0,"nodes":[],"links":[],"groups":[],"config":{},"extra":{},"version":0.4}},{"id":28,"type":"sparks/procedure","pos":[1600,550],"size":[500,175],"flags":{},"order":13,"mode":0,"inputs":[{"name":"\\\"LFCAnim\\\".I_AlarmB"},{"name":"\\\"LFCAnim\\\".I_AlarmA"},{"name":"in","link":13}],"outputs":[{"name":"L:0.5_network_14_","links":[],"slot_index":0},{"name":"out","links":[14],"slot_index":1}],"title":"**** 1 - Inputs ****","description":"**** 1 - Inputs ****","properties":{"enabled":true,"id":0},"subgraph":{"last_node_id":0,"last_link_id":0,"nodes":[],"links":[],"groups":[],"config":{},"extra":{},"version":0.4}},{"id":29,"type":"sparks/procedure","pos":[2150,550],"size":[500,175],"flags":{},"order":14,"mode":0,"inputs":[{"name":"\\\"LFCAnim\\\".I_AlarmC"},{"name":"\\\"LFCAnim\\\".I_AlarmA"},{"name":"\\\"LFCAnim\\\".I_AlarmB"},{"name":"in","link":14}],"outputs":[{"name":"L:0.6_network_15_","links":[],"slot_index":0},{"name":"out","links":[15],"slot_index":1}],"title":"**** 1 - Inputs ****","description":"**** 1 - Inputs ****","properties":{"enabled":true,"id":0},"subgraph":{"last_node_id":0,"last_link_id":0,"nodes":[],"links":[],"groups":[],"config":{},"extra":{},"version":0.4}},{"id":30,"type":"sparks/procedure","pos":[2700,550],"size":[500,175],"flags":{},"order":15,"mode":0,"inputs":[{"name":"\\\"LFCAnim\\\".I_AlarmD"},{"name":"\\\"LFCAnim\\\".I_AlarmA"},{"name":"\\\"LFCAnim\\\".I_AlarmB"},{"name":"\\\"LFCAnim\\\".I_AlarmC"},{"name":"in","link":15}],"outputs":[{"name":"L:0.7_network_16_","links":[],"slot_index":0},{"name":"out","links":[16],"slot_index":1}],"title":"**** 1 - Inputs ****","description":"**** 1 - Inputs ****","properties":{"enabled":true,"id":0},"subgraph":{"last_node_id":0,"last_link_id":0,"nodes":[],"links":[],"groups":[],"config":{},"extra":{},"version":0.4}},{"id":31,"type":"sparks/procedure","pos":[3250,550],"size":[500,175],"flags":{},"order":16,"mode":0,"inputs":[{"name":"in","link":16}],"outputs":[{"name":"\\\"LFCAnim\\\".H_IAnim","links":[],"slot_index":0}],"title":"**** 8 - Outputs ****","description":"**** 8 - Outputs ****","properties":{"enabled":true,"id":0},"subgraph":{"last_node_id":0,"last_link_id":0,"nodes":[],"links":[],"groups":[],"config":{},"extra":{},"version":0.4}}],"links":[[1,15,1,16,1,null],[2,16,1,17,1,null],[3,17,1,18,1,null],[4,18,1,19,1,null],[5,19,1,20,1,null],[6,20,1,21,1,null],[7,21,1,22,1,null],[8,22,1,23,1,null],[9,23,1,24,1,null],[10,24,1,25,1,null],[11,25,1,26,1,null],[12,26,1,27,1,null],[13,27,1,28,2,null],[14,28,1,29,3,null],[15,29,1,30,4,null],[16,30,1,31,0,null]],"groups":[],"config":{},"extra":{},"version":0.4}},{"id":34,"type":"sparks/process","pos":[3800,550],"size":[500,175],"flags":{},"order":12,"mode":0,"inputs":[{"name":"Call_33_34","link":56}],"outputs":[{"name":"Out","links":null}],"title":"\\\"LBitToWord\\\"()","description":"\\\"LBitToWord\\\"()","properties":{"enabled":true,"id":0},"subgraph":{"last_node_id":51,"last_link_id":0,"nodes":[{"id":35,"type":"sparks/procedure","pos":[50,50],"size":[500,175],"flags":{},"order":0,"mode":0,"inputs":[{"name":"\\\"LBitToWord\\\".I_In0"}],"outputs":[{"name":"L:1.0_network_1_","links":[],"slot_index":0},{"name":"out","links":[17],"slot_index":1}],"title":"**** 1 - Inputs ****","description":"**** 1 - Inputs ****","properties":{"enabled":true,"id":0},"subgraph":{"last_node_id":0,"last_link_id":0,"nodes":[],"links":[],"groups":[],"config":{},"extra":{},"version":0.4}},{"id":36,"type":"sparks/procedure","pos":[600,50],"size":[500,175],"flags":{},"order":1,"mode":0,"inputs":[{"name":"\\\"LBitToWord\\\".I_In1"},{"name":"in","link":17}],"outputs":[{"name":"L:1.1_network_2_","links":[],"slot_index":0},{"name":"out","links":[18],"slot_index":1}],"title":"**** 1 - Inputs ****","description":"**** 1 - Inputs ****","properties":{"enabled":true,"id":0},"subgraph":{"last_node_id":0,"last_link_id":0,"nodes":[],"links":[],"groups":[],"config":{},"extra":{},"version":0.4}},{"id":37,"type":"sparks/procedure","pos":[1150,50],"size":[500,175],"flags":{},"order":2,"mode":0,"inputs":[{"name":"\\\"LBitToWord\\\".I_In2"},{"name":"in","link":18}],"outputs":[{"name":"L:1.2_network_3_","links":[],"slot_index":0},{"name":"out","links":[19],"slot_index":1}],"title":"**** 1 - Inputs ****","description":"**** 1 - Inputs ****","properties":{"enabled":true,"id":0},"subgraph":{"last_node_id":0,"last_link_id":0,"nodes":[],"links":[],"groups":[],"config":{},"extra":{},"version":0.4}},{"id":38,"type":"sparks/procedure","pos":[1700,50],"size":[500,175],"flags":{},"order":3,"mode":0,"inputs":[{"name":"\\\"LBitToWord\\\".I_In3"},{"name":"in","link":19}],"outputs":[{"name":"L:1.3_network_4_","links":[],"slot_index":0},{"name":"out","links":[20],"slot_index":1}],"title":"**** 1 - Inputs ****","description":"**** 1 - Inputs ****","properties":{"enabled":true,"id":0},"subgraph":{"last_node_id":0,"last_link_id":0,"nodes":[],"links":[],"groups":[],"config":{},"extra":{},"version":0.4}},{"id":39,"type":"sparks/procedure","pos":[2250,50],"size":[500,175],"flags":{},"order":4,"mode":0,"inputs":[{"name":"\\\"LBitToWord\\\".I_In4"},{"name":"in","link":20}],"outputs":[{"name":"L:1.4_network_5_","links":[],"slot_index":0},{"name":"out","links":[21],"slot_index":1}],"title":"**** 1 - Inputs ****","description":"**** 1 - Inputs ****","properties":{"enabled":true,"id":0},"subgraph":{"last_node_id":0,"last_link_id":0,"nodes":[],"links":[],"groups":[],"config":{},"extra":{},"version":0.4}},{"id":40,"type":"sparks/procedure","pos":[2800,50],"size":[500,175],"flags":{},"order":5,"mode":0,"inputs":[{"name":"\\\"LBitToWord\\\".I_In5"},{"name":"in","link":21}],"outputs":[{"name":"L:1.5_network_6_","links":[],"slot_index":0},{"name":"out","links":[22],"slot_index":1}],"title":"**** 1 - Inputs ****","description":"**** 1 - Inputs ****","properties":{"enabled":true,"id":0},"subgraph":{"last_node_id":0,"last_link_id":0,"nodes":[],"links":[],"groups":[],"config":{},"extra":{},"version":0.4}},{"id":41,"type":"sparks/procedure","pos":[3350,50],"size":[500,175],"flags":{},"order":6,"mode":0,"inputs":[{"name":"\\\"LBitToWord\\\".I_In6"},{"name":"in","link":22}],"outputs":[{"name":"L:1.6_network_7_","links":[],"slot_index":0},{"name":"out","links":[23],"slot_index":1}],"title":"**** 1 - Inputs ****","description":"**** 1 - Inputs ****","properties":{"enabled":true,"id":0},"subgraph":{"last_node_id":0,"last_link_id":0,"nodes":[],"links":[],"groups":[],"config":{},"extra":{},"version":0.4}},{"id":42,"type":"sparks/procedure","pos":[3900,50],"size":[500,175],"flags":{},"order":7,"mode":0,"inputs":[{"name":"\\\"LBitToWord\\\".I_In7"},{"name":"in","link":23}],"outputs":[{"name":"L:1.7_network_8_","links":[],"slot_index":0},{"name":"out","links":[24],"slot_index":1}],"title":"**** 1 - Inputs ****","description":"**** 1 - Inputs ****","properties":{"enabled":true,"id":0},"subgraph":{"last_node_id":0,"last_link_id":0,"nodes":[],"links":[],"groups":[],"config":{},"extra":{},"version":0.4}},{"id":43,"type":"sparks/procedure","pos":[4450,50],"size":[500,175],"flags":{},"order":8,"mode":0,"inputs":[{"name":"\\\"LBitToWord\\\".I_In8"},{"name":"in","link":24}],"outputs":[{"name":"L:0.0_network_9_","links":[],"slot_index":0},{"name":"out","links":[25],"slot_index":1}],"title":"**** 1 - Inputs ****","description":"**** 1 - Inputs ****","properties":{"enabled":true,"id":0},"subgraph":{"last_node_id":0,"last_link_id":0,"nodes":[],"links":[],"groups":[],"config":{},"extra":{},"version":0.4}},{"id":44,"type":"sparks/procedure","pos":[5000,50],"size":[500,175],"flags":{},"order":9,"mode":0,"inputs":[{"name":"\\\"LBitToWord\\\".I_In9"},{"name":"in","link":25}],"outputs":[{"name":"L:0.1_network_10_","links":[],"slot_index":0},{"name":"out","links":[26],"slot_index":1}],"title":"**** 1 - Inputs ****","description":"**** 1 - Inputs ****","properties":{"enabled":true,"id":0},"subgraph":{"last_node_id":0,"last_link_id":0,"nodes":[],"links":[],"groups":[],"config":{},"extra":{},"version":0.4}},{"id":45,"type":"sparks/procedure","pos":[5550,50],"size":[500,175],"flags":{},"order":10,"mode":0,"inputs":[{"name":"\\\"LBitToWord\\\".I_In10"},{"name":"in","link":26}],"outputs":[{"name":"L:0.2_network_11_","links":[],"slot_index":0},{"name":"out","links":[27],"slot_index":1}],"title":"**** 1 - Inputs ****","description":"**** 1 - Inputs ****","properties":{"enabled":true,"id":0},"subgraph":{"last_node_id":0,"last_link_id":0,"nodes":[],"links":[],"groups":[],"config":{},"extra":{},"version":0.4}},{"id":46,"type":"sparks/procedure","pos":[500,550],"size":[500,175],"flags":{},"order":11,"mode":0,"inputs":[{"name":"\\\"LBitToWord\\\".I_In11"},{"name":"in","link":27}],"outputs":[{"name":"L:0.3_network_12_","links":[],"slot_index":0},{"name":"out","links":[28],"slot_index":1}],"title":"**** 1 - Inputs ****","description":"**** 1 - Inputs ****","properties":{"enabled":true,"id":0},"subgraph":{"last_node_id":0,"last_link_id":0,"nodes":[],"links":[],"groups":[],"config":{},"extra":{},"version":0.4}},{"id":47,"type":"sparks/procedure","pos":[1050,550],"size":[500,175],"flags":{},"order":12,"mode":0,"inputs":[{"name":"\\\"LBitToWord\\\".I_In12"},{"name":"in","link":28}],"outputs":[{"name":"L:0.4_network_13_","links":[],"slot_index":0},{"name":"out","links":[29],"slot_index":1}],"title":"**** 1 - Inputs ****","description":"**** 1 - Inputs ****","properties":{"enabled":true,"id":0},"subgraph":{"last_node_id":0,"last_link_id":0,"nodes":[],"links":[],"groups":[],"config":{},"extra":{},"version":0.4}},{"id":48,"type":"sparks/procedure","pos":[1600,550],"size":[500,175],"flags":{},"order":13,"mode":0,"inputs":[{"name":"\\\"LBitToWord\\\".I_In13"},{"name":"in","link":29}],"outputs":[{"name":"L:0.5_network_14_","links":[],"slot_index":0},{"name":"out","links":[30],"slot_index":1}],"title":"**** 1 - Inputs ****","description":"**** 1 - Inputs ****","properties":{"enabled":true,"id":0},"subgraph":{"last_node_id":0,"last_link_id":0,"nodes":[],"links":[],"groups":[],"config":{},"extra":{},"version":0.4}},{"id":49,"type":"sparks/procedure","pos":[2150,550],"size":[500,175],"flags":{},"order":14,"mode":0,"inputs":[{"name":"\\\"LBitToWord\\\".I_In14"},{"name":"in","link":30}],"outputs":[{"name":"L:0.6_network_15_","links":[],"slot_index":0},{"name":"out","links":[31],"slot_index":1}],"title":"**** 1 - Inputs ****","description":"**** 1 - Inputs ****","properties":{"enabled":true,"id":0},"subgraph":{"last_node_id":0,"last_link_id":0,"nodes":[],"links":[],"groups":[],"config":{},"extra":{},"version":0.4}},{"id":50,"type":"sparks/procedure","pos":[2700,550],"size":[500,175],"flags":{},"order":15,"mode":0,"inputs":[{"name":"\\\"LBitToWord\\\".I_In15"},{"name":"in","link":31}],"outputs":[{"name":"L:0.7_network_16_","links":[],"slot_index":0},{"name":"out","links":[32],"slot_index":1}],"title":"**** 1 - Inputs ****","description":"**** 1 - Inputs ****","properties":{"enabled":true,"id":0},"subgraph":{"last_node_id":0,"last_link_id":0,"nodes":[],"links":[],"groups":[],"config":{},"extra":{},"version":0.4}},{"id":51,"type":"sparks/procedure","pos":[3250,550],"size":[500,175],"flags":{},"order":16,"mode":0,"inputs":[{"name":"in","link":32}],"outputs":[{"name":"\\\"LBitToWord\\\".O_WordOut","links":[],"slot_index":0}],"title":"**** 8 - Outputs ****","description":"**** 8 - Outputs ****","properties":{"enabled":true,"id":0},"subgraph":{"last_node_id":0,"last_link_id":0,"nodes":[],"links":[],"groups":[],"config":{},"extra":{},"version":0.4}}],"links":[[17,35,1,36,1,null],[18,36,1,37,1,null],[19,37,1,38,1,null],[20,38,1,39,1,null],[21,39,1,40,1,null],[22,40,1,41,1,null],[23,41,1,42,1,null],[24,42,1,43,1,null],[25,43,1,44,1,null],[26,44,1,45,1,null],[27,45,1,46,1,null],[28,46,1,47,1,null],[29,47,1,48,1,null],[30,48,1,49,1,null],[31,49,1,50,1,null],[32,50,1,51,0,null]],"groups":[],"config":{},"extra":{},"version":0.4}}],"links":[[33,4,4,6,3,null],[34,6,4,7,3,null],[35,7,4,8,3,null],[36,8,4,9,3,null],[37,9,4,10,3,null],[38,10,4,11,3,null],[39,11,4,12,3,null],[40,12,4,13,6,null],[41,13,14,33,3,null],[42,33,17,53,8,null],[43,53,1,54,8,null],[44,54,2,55,1,null],[45,55,2,56,1,null],[46,56,2,57,1,null],[47,4,3,5,0,null],[48,6,3,5,1,null],[49,7,3,5,2,null],[50,8,3,5,3,null],[51,9,3,5,4,null],[52,10,3,5,5,null],[53,11,3,5,6,null],[54,12,3,5,7,null],[55,13,13,14,0,null],[56,33,16,34,0,null]],"groups":[],"config":{},"extra":{},"version":0.4}},{"id":59,"type":"sparks/procedure","pos":[942,443],"size":[500,175],"flags":{},"order":4,"mode":0,"inputs":[{"name":"\\\"_Robot04_Data\\\".FromRob.doBreakReleased","link":4},{"name":""},{"name":"\\\"_MZPIBC1_OpDesk\\\".SwAS2_T1","link":1},{"name":"\\\"_MZPIBC1_OpDesk\\\".SwAS1_Cleaning","link":2},{"name":"in","link":58}],"outputs":[{"name":"out","links":[59],"slot_index":0}],"title":"**** 4.4 Machine Status - Calculated ****","description":"**** 4.4 Machine Status - Calculated ****","properties":{"enabled":true,"id":0},"subgraph":{"last_node_id":0,"last_link_id":0,"nodes":[],"links":[],"groups":[],"config":{},"extra":{},"version":0.4}},{"id":63,"type":"sparks/system","pos":[273,569],"size":[200,70],"flags":{},"order":0,"mode":0,"outputs":[{"name":"_MZPIBC1_OpDesk","type":"","links":[1,2],"slot_index":0}],"title":"Modezone","properties":{"enabled":true,"id":0},"fault_table":[{"fault":"Enter Fault","cause":"Enter Cause","mitigation":"Enter Mitigation"}],"sources":{},"subgraph":{"last_node_id":0,"last_link_id":0,"nodes":[],"links":[],"groups":[],"config":{},"extra":{},"version":0.4}},{"id":2,"type":"sparks/procedure","pos":[809,50],"size":[500,175],"flags":{},"order":2,"mode":0,"inputs":[{"name":"in","link":57}],"outputs":[{"name":"Call_2_3","links":[60],"slot_index":0},{"name":"out","links":[58],"slot_index":1}],"title":"**** 4.4 Machine Status - Calculated ****","description":"**** 4.4 Machine Status - Calculated ****","properties":{"enabled":true,"id":0},"subgraph":{"last_node_id":0,"last_link_id":0,"nodes":[],"links":[],"groups":[],"config":{},"extra":{},"version":0.4}},{"id":61,"type":"sparks/system","pos":[-384,252],"size":[404.04194892930366,100.17257874939014],"flags":{},"order":6,"mode":0,"inputs":[{"name":"\\\"_Robot04FC\\\".ResetAfterBreakReleased","type":"","link":5},{"name":"\\\"_Robot4FC\\\".AD_RobotInSimuHomePos","type":"","link":6}],"outputs":[{"name":"_Robot04_Data","type":"","links":[3,4],"slot_index":0}],"title":"Robot04","properties":{"enabled":true,"id":0},"fault_table":[{"fault":"Enter Fault","cause":"Enter Cause","mitigation":"Enter Mitigation"}],"sources":{},"subgraph":{"last_node_id":0,"last_link_id":0,"nodes":[],"links":[],"groups":[],"config":{},"extra":{},"version":0.4}},{"id":60,"type":"sparks/procedure","pos":[1511,79],"size":[500,175],"flags":{},"order":5,"mode":0,"inputs":[{"name":"\\\"Rob04_BreakeReleased\\\""},{"name":"in","link":59}],"outputs":[{"name":"\\\"_Robot04FC\\\".ResetAfterBreakReleased","links":[5],"slot_index":0}],"title":"**** 4.4 Machine Status - Calculated ****","description":"**** 4.4 Machine Status - Calculated ****","properties":{"enabled":true,"id":0},"subgraph":{"last_node_id":0,"last_link_id":0,"nodes":[],"links":[],"groups":[],"config":{},"extra":{},"version":0.4}},{"id":1,"type":"sparks/procedure","pos":[134,-31],"size":[564.038903160952,255.32737963589335],"flags":{},"order":1,"mode":0,"inputs":[{"name":"\\\"_Robot04_Data\\\".StatusRobot.Rob_InSimuHomePos","link":3}],"outputs":[{"name":"\\\"_Robot04FC\\\".AD_RobInSimuHomePos","links":[6],"slot_index":0},{"name":"out","links":[57],"slot_index":1}],"title":"**** 2.2 Alarms - Alarms Generation ****","description":"**** 2.2 Alarms - Alarms Generation ****","properties":{"enabled":true,"id":0},"fault_table":[{"fault":"Enter Fault","cause":"Enter Cause","mitigation":"Enter Mitigation"}],"sources":{},"subgraph":{"last_node_id":0,"last_link_id":0,"nodes":[],"links":[],"groups":[],"config":{},"extra":{},"version":0.4}}],"links":[[1,63,0,59,2,""],[2,63,0,59,3,""],[3,61,0,1,0,""],[4,61,0,59,0,""],[5,60,0,61,0,null],[6,1,0,61,1,null],[57,1,1,2,0,null],[58,2,1,59,4,null],[59,59,0,60,1,null],[60,2,0,3,0,null]],"groups":[],"config":{},"extra":{},"version":0.4}
"""
    # text = """
    # {"last_node_id": 1, "last_link_id": 0, "nodes": [{"title": "B43", "id": 1, "type": "sparks/system", "sources": {"1": {"property": "BodyNumber", "hasProperty": "BodyNumber", "hasSensor": "B43", "source": "snowflake", "hasColumn": "bodyNumber", "hasDatabase": "VCG", "hasSchema": "ATACQ_VCG", "hasTable": "atacq_item_event"}, "2": {"property": "BodyNumber", "hasProperty": "BodyNumber", "hasSensor": "B43", "source": "kafka", "hasKey": "bodyNumber", "hasTopic": "vcg.atacq_vcg.atacq_item_event"}, "3": {"property": "BodyType", "hasProperty": "BodyType", "hasSensor": "B43", "source": "snowflake", "hasColumn": "bodyType", "hasDatabase": "VCG", "hasSchema": "ATACQ_VCG", "hasTable": "atacq_item_event"}, "4": {"property": "BodyType", "hasProperty": "BodyType", "hasSensor": "B43", "source": "kafka", "hasKey": "bodyType", "hasTopic": "vcg.atacq_vcg.atacq_item_event"}, "5": {"property": "Description", "hasProperty": "Description", "hasSensor": "B43", "source": "snowflake", "hasColumn": "atacqItemCategoryCode", "hasDatabase": "VCG", "hasSchema": "ATACQ_VCG", "hasTable": "atacq_item_event"}, "6": {"property": "Description", "hasProperty": "Description", "hasSensor": "B43", "source": "kafka", "hasKey": "atacqItemCategoryCode", "hasTopic": "vcg.atacq_vcg.atacq_item_event"}, "7": {"property": "ItemCode", "hasProperty": "ItemCode", "hasSensor": "B43", "source": "snowflake", "hasColumn": "atacqItemCode", "hasDatabase": "VCG", "hasSchema": "ATACQ_VCG", "hasTable": "atacq_item_event"}, "8": {"property": "ItemCode", "hasProperty": "ItemCode", "hasSensor": "B43", "source": "kafka", "hasKey": "atacqItemCode", "hasTopic": "vcg.atacq_vcg.atacq_item_event"}, "9": {"property": "Code", "hasProperty": "Code", "hasSensor": "B43", "source": "snowflake", "hasColumn": "atacqItemFamilyCode", "hasDatabase": "VCG", "hasSchema": "ATACQ_VCG", "hasTable": "atacq_item_event"}, "10": {"property": "Code", "hasProperty": "Code", "hasSensor": "B43", "source": "kafka", "hasKey": "atacqItemFamilyCode", "hasTopic": "vcg.atacq_vcg.atacq_item_event"}, "11": {"property": "Description", "hasProperty": "Description", "hasSensor": "B43", "source": "snowflake", "hasColumn": "atacqItemLocalDescription", "hasDatabase": "VCG", "hasSchema": "ATACQ_VCG", "hasTable": "atacq_item_event"}, "12": {"property": "Description", "hasProperty": "Description", "hasSensor": "B43", "source": "kafka", "hasKey": "atacqItemLocalDescription", "hasTopic": "vcg.atacq_vcg.atacq_item_event"}, "13": {"property": "Timestamp", "hasProperty": "Timestamp", "hasSensor": "B43", "source": "snowflake", "hasColumn": "timestamp", "hasDatabase": "VCG", "hasSchema": "ATACQ_VCG", "hasTable": "atacq_item_event"}, "14": {"property": "Timestamp", "hasProperty": "Timestamp", "hasSensor": "B43", "source": "kafka", "hasKey": "timestamp", "hasTopic": "vcg.atacq_vcg.atacq_item_event"}, "15": {"property": "BodyNumber", "hasProperty": "BodyNumber", "hasSensor": "B43", "source": "snowflake", "hasColumn": "bodyNumber", "hasDatabase": "VCG", "hasSchema": "PRODUCTION_TRACKING_VCG", "hasTable": "body_tracking"}, "16": {"property": "BodyNumber", "hasProperty": "BodyNumber", "hasSensor": "B43", "source": "kafka", "hasKey": "bodyNumber", "hasTopic": "vcg.production_tracking_vcg.body_tracking"}, "17": {"property": "BodyType", "hasProperty": "BodyType", "hasSensor": "B43", "source": "snowflake", "hasColumn": "bodyType", "hasDatabase": "VCG", "hasSchema": "PRODUCTION_TRACKING_VCG", "hasTable": "body_tracking"}, "18": {"property": "BodyType", "hasProperty": "BodyType", "hasSensor": "B43", "source": "kafka", "hasKey": "bodyType", "hasTopic": "vcg.production_tracking_vcg.body_tracking"}, "19": {"property": "FlowCode", "hasProperty": "FlowCode", "hasSensor": "B43", "source": "snowflake", "hasColumn": "flowCode", "hasDatabase": "VCG", "hasSchema": "PRODUCTION_TRACKING_VCG", "hasTable": "body_tracking"}, "20": {"property": "FlowCode", "hasProperty": "FlowCode", "hasSensor": "B43", "source": "kafka", "hasKey": "flowCode", "hasTopic": "vcg.production_tracking_vcg.body_tracking"}, "21": {"property": "BodyNumber", "hasProperty": "BodyNumber", "hasSensor": "B43", "source": "snowflake", "hasColumn": "productionBody", "hasDatabase": "VCG", "hasSchema": "PRODUCTION_TRACKING_VCG", "hasTable": "body_tracking"}, "22": {"property": "BodyNumber", "hasProperty": "BodyNumber", "hasSensor": "B43", "source": "kafka", "hasKey": "productionBody", "hasTopic": "vcg.production_tracking_vcg.body_tracking"}, "23": {"property": "Registration", "hasProperty": "Registration", "hasSensor": "B43", "source": "snowflake", "hasColumn": "registrationPoint", "hasDatabase": "VCG", "hasSchema": "PRODUCTION_TRACKING_VCG", "hasTable": "body_tracking"}, "24": {"property": "Registration", "hasProperty": "Registration", "hasSensor": "B43", "source": "kafka", "hasKey": "registrationPoint", "hasTopic": "vcg.production_tracking_vcg.body_tracking"}, "25": {"property": "Timestamp", "hasProperty": "Timestamp", "hasSensor": "B43", "source": "snowflake", "hasColumn": "timestamp", "hasDatabase": "VCG", "hasSchema": "PRODUCTION_TRACKING_VCG", "hasTable": "body_tracking"}, "26": {"property": "Timestamp", "hasProperty": "Timestamp", "hasSensor": "B43", "source": "kafka", "hasKey": "timestamp", "hasTopic": "vcg.production_tracking_vcg.body_tracking"}}, "links": [], "subgraph": {"last_node_id": 1, "last_link_id": 0, "nodes": [{"title": "B433", "id": 2, "type": "sparks/system", "sources": {}, "links": [], "subgraph": {"last_node_id": 1, "last_link_id": 0, "nodes": [{"title": "B433X1", "id": 3, "type": "sparks/system", "sources": {"1": {"property": "BodyNumber", "hasProperty": "BodyNumber", "hasSensor": "B433X1", "source": "snowflake", "hasColumn": "_DataCar.BodyNr", "hasDatabase": "VCG", "hasSchema": "GB_TEST_SEQSTEP", "hasTable": "SEQSTEPS"}, "2": {"property": "BodyNumber", "hasProperty": "BodyNumber", "hasSensor": "B433X1", "source": "kafka", "hasKey": "_DataCar.BodyNr", "hasTopic": "vcg.gb_test_seqstep.seqsteps"}, "3": {"property": "Timestamp", "hasProperty": "Timestamp", "hasSensor": "B433X1", "source": "snowflake", "hasColumn": "timestamp", "hasDatabase": "VCG", "hasSchema": "GB_TEST_SEQSTEP", "hasTable": "SEQSTEPS"}, "4": {"property": "Timestamp", "hasProperty": "Timestamp", "hasSensor": "B433X1", "source": "kafka", "hasKey": "timestamp", "hasTopic": "vcg.gb_test_seqstep.seqsteps"}, "5": {"property": "Severity", "hasProperty": "Severity", "hasSensor": "B433X1", "source": "snowflake", "hasColumn": "Severity", "hasDatabase": "VCG", "hasSchema": "GB_ROBVIEW", "hasTable": "EVENTLOGMESSAGE"}, "6": {"property": "Severity", "hasProperty": "Severity", "hasSensor": "B433X1", "source": "kafka", "hasKey": "Severity", "hasTopic": "vcg.gb_robview.eventlogmessage"}, "7": {"property": "HistoricalDataSource", "hasProperty": "HistoricalDataSource", "hasSensor": "B433X1", "source": "snowflake", "hasColumn": "Source", "hasDatabase": "VCG", "hasSchema": "GB_ROBVIEW", "hasTable": "EVENTLOGMESSAGE"}, "8": {"property": "HistoricalDataSource", "hasProperty": "HistoricalDataSource", "hasSensor": "B433X1", "source": "kafka", "hasKey": "Source", "hasTopic": "vcg.gb_robview.eventlogmessage"}, "9": {"property": "Timestamp", "hasProperty": "Timestamp", "hasSensor": "B433X1", "source": "snowflake", "hasColumn": "timestamp", "hasDatabase": "VCG", "hasSchema": "GB_ROBVIEW", "hasTable": "EVENTLOGMESSAGE"}, "10": {"property": "Timestamp", "hasProperty": "Timestamp", "hasSensor": "B433X1", "source": "kafka", "hasKey": "timestamp", "hasTopic": "vcg.gb_robview.eventlogmessage"}, "11": {"property": "Title", "hasProperty": "Title", "hasSensor": "B433X1", "source": "snowflake", "hasColumn": "Title", "hasDatabase": "VCG", "hasSchema": "GB_ROBVIEW", "hasTable": "EVENTLOGMESSAGE"}, "12": {"property": "Title", "hasProperty": "Title", "hasSensor": "B433X1", "source": "kafka", "hasKey": "Title", "hasTopic": "vcg.gb_robview.eventlogmessage"}, "13": {"property": "BodyNumber", "hasProperty": "BodyNumber", "hasSensor": "B433X1", "source": "snowflake", "hasColumn": "body.bodynumber", "hasDatabase": "VCG", "hasSchema": "GB_PRODUCTIONLOG", "hasTable": "IBC1"}, "14": {"property": "BodyNumber", "hasProperty": "BodyNumber", "hasSensor": "B433X1", "source": "kafka", "hasKey": "body.bodynumber", "hasTopic": "vcg.gb_productionlog.ibc1"}, "15": {"property": "Timestamp", "hasProperty": "Timestamp", "hasSensor": "B433X1", "source": "snowflake", "hasColumn": "timestamp", "hasDatabase": "VCG", "hasSchema": "GB_PRODUCTIONLOG", "hasTable": "IBC1"}, "16": {"property": "Timestamp", "hasProperty": "Timestamp", "hasSensor": "B433X1", "source": "kafka", "hasKey": "timestamp", "hasTopic": "vcg.gb_productionlog.ibc1"}, "17": {"property": "TypemaskedBody", "hasProperty": "TypemaskedBody", "hasSensor": "B433X1", "source": "snowflake", "hasColumn": "body.typemasked", "hasDatabase": "VCG", "hasSchema": "GB_PRODUCTIONLOG", "hasTable": "IBC1"}, "18": {"property": "TypemaskedBody", "hasProperty": "TypemaskedBody", "hasSensor": "B433X1", "source": "kafka", "hasKey": "body.typemasked", "hasTopic": "vcg.gb_productionlog.ibc1"}, "19": {"property": "Type", "hasProperty": "Type", "hasSensor": "B433X1", "source": "snowflake", "hasColumn": "t_type", "hasDatabase": "VCG", "hasSchema": "GB_PRODUCTIONLOG", "hasTable": "IBC1"}, "20": {"property": "Type", "hasProperty": "Type", "hasSensor": "B433X1", "source": "kafka", "hasKey": "t_type", "hasTopic": "vcg.gb_productionlog.ibc1"}, "21": {"property": "STNModes", "hasProperty": "STNModes", "hasSensor": "B433X1", "source": "snowflake", "hasColumn": "modes.STN.pipe", "hasDatabase": "VCG", "hasSchema": "GB_PRODUCTIONLOG", "hasTable": "IBC1"}, "22": {"property": "STNModes", "hasProperty": "STNModes", "hasSensor": "B433X1", "source": "kafka", "hasKey": "modes.STN.pipe", "hasTopic": "vcg.gb_productionlog.ibc1"}, "23": {"property": "DBSTASTO", "hasProperty": "DBSTASTO", "hasSensor": "B433X1", "source": "snowflake", "hasColumn": "DBSTASTO", "hasDatabase": "VCG", "hasSchema": "GB_TEMP_CIP", "hasTable": "STO_MAN"}, "24": {"property": "DBSTASTO", "hasProperty": "DBSTASTO", "hasSensor": "B433X1", "source": "kafka", "hasKey": "DBSTASTO", "hasTopic": "vcg.gb_temp_cip.sto_man"}, "25": {"property": "OFOUTKODE", "hasProperty": "OFOUTKODE", "hasSensor": "B433X1", "source": "snowflake", "hasColumn": "OFOUTKODE", "hasDatabase": "VCG", "hasSchema": "GB_TEMP_CIP", "hasTable": "STO_MAN"}, "26": {"property": "OFOUTKODE", "hasProperty": "OFOUTKODE", "hasSensor": "B433X1", "source": "kafka", "hasKey": "OFOUTKODE", "hasTopic": "vcg.gb_temp_cip.sto_man"}}, "links": [], "subgraph": {"last_node_id": 1, "last_link_id": 0, "nodes": [{"title": "B4336150", "id": 4, "type": "sparks/system", "sources": {}, "links": [], "subgraph": {"last_node_id": 1, "last_link_id": 0, "nodes": [{"title": "B4336150KP", "id": 5, "type": "sparks/system", "sources": {}, "links": [], "subgraph": {"last_node_id": 1, "last_link_id": 0, "nodes": [{"title": "B4336150KPBM1", "id": 6, "type": "sparks/system", "sources": {}, "links": []}, {"title": "B4336150KPBT1", "id": 7, "type": "sparks/system", "sources": {}, "links": []}]}}]}}, {"title": "B4337150R01", "id": 8, "type": "sparks/system", "sources": {"1": {"property": "Modes", "hasProperty": "Modes", "hasSensor": "B4337150R01", "source": "snowflake", "hasColumn": "modes.R01.1", "hasDatabase": "VCG", "hasSchema": "GB_PRODUCTIONLOG", "hasTable": "IBC1"}, "2": {"property": "Modes", "hasProperty": "Modes", "hasSensor": "B4337150R01", "source": "kafka", "hasKey": "modes.R01.1", "hasTopic": "vcg.gb_productionlog.ibc1"}}, "links": []}, {"title": "B4337150R02", "id": 9, "type": "sparks/system", "sources": {"1": {"property": "CavityCleaned", "hasProperty": "CavityCleaned", "hasSensor": "B4337150R02", "source": "snowflake", "hasColumn": "_Robot02_Data.doCavityCleaned1", "hasDatabase": "VCG", "hasSchema": "GB_TEST_SEQSTEP", "hasTable": "SEQSTEPS"}, "2": {"property": "CavityCleaned", "hasProperty": "CavityCleaned", "hasSensor": "B4337150R02", "source": "kafka", "hasKey": "_Robot02_Data.doCavityCleaned1", "hasTopic": "vcg.gb_test_seqstep.seqsteps"}, "3": {"property": "FluidConsumption", "hasProperty": "FluidConsumption", "hasSensor": "B4337150R02", "source": "snowflake", "hasColumn": "consumption.R02.fluid", "hasDatabase": "VCG", "hasSchema": "GB_PRODUCTIONLOG", "hasTable": "IBC1"}, "4": {"property": "FluidConsumption", "hasProperty": "FluidConsumption", "hasSensor": "B4337150R02", "source": "kafka", "hasKey": "consumption.R02.fluid", "hasTopic": "vcg.gb_productionlog.ibc1"}, "5": {"property": "MtrlChangeOn", "hasProperty": "MtrlChangeOn", "hasSensor": "B4337150R02", "source": "snowflake", "hasColumn": "_Robot02_Data.MtrlChangeOn", "hasDatabase": "VCG", "hasSchema": "GB_TEST_SEQSTEP", "hasTable": "SEQSTEPS"}, "6": {"property": "MtrlChangeOn", "hasProperty": "MtrlChangeOn", "hasSensor": "B4337150R02", "source": "kafka", "hasKey": "_Robot02_Data.MtrlChangeOn", "hasTopic": "vcg.gb_test_seqstep.seqsteps"}, "7": {"property": "PerfA1InCl", "hasProperty": "PerfA1InCl", "hasSensor": "B4337150R02", "source": "snowflake", "hasColumn": "_Robot02_Data.doPerfA1InCl", "hasDatabase": "VCG", "hasSchema": "GB_TEST_SEQSTEP", "hasTable": "SEQSTEPS"}, "8": {"property": "PerfA1InCl", "hasProperty": "PerfA1InCl", "hasSensor": "B4337150R02", "source": "kafka", "hasKey": "_Robot02_Data.doPerfA1InCl", "hasTopic": "vcg.gb_test_seqstep.seqsteps"}, "9": {"property": "PerfA1OutCl", "hasProperty": "PerfA1OutCl", "hasSensor": "B4337150R02", "source": "snowflake", "hasColumn": "_Robot02_Data.doPerfA1OutCl", "hasDatabase": "VCG", "hasSchema": "GB_TEST_SEQSTEP", "hasTable": "SEQSTEPS"}, "10": {"property": "PerfA1OutCl", "hasProperty": "PerfA1OutCl", "hasSensor": "B4337150R02", "source": "kafka", "hasKey": "_Robot02_Data.doPerfA1OutCl", "hasTopic": "vcg.gb_test_seqstep.seqsteps"}}, "links": []}, {"title": "B4337150R03", "id": 10, "type": "sparks/system", "sources": {"1": {"property": "CavityCleaned", "hasProperty": "CavityCleaned", "hasSensor": "B4337150R03", "source": "snowflake", "hasColumn": "_Robot03_Data.doCavityCleaned1", "hasDatabase": "VCG", "hasSchema": "GB_TEST_SEQSTEP", "hasTable": "SEQSTEPS"}, "2": {"property": "CavityCleaned", "hasProperty": "CavityCleaned", "hasSensor": "B4337150R03", "source": "kafka", "hasKey": "_Robot03_Data.doCavityCleaned1", "hasTopic": "vcg.gb_test_seqstep.seqsteps"}, "3": {"property": "FluidConsumption", "hasProperty": "FluidConsumption", "hasSensor": "B4337150R03", "source": "snowflake", "hasColumn": "consumption.R03.fluid", "hasDatabase": "VCG", "hasSchema": "GB_PRODUCTIONLOG", "hasTable": "IBC1"}, "4": {"property": "FluidConsumption", "hasProperty": "FluidConsumption", "hasSensor": "B4337150R03", "source": "kafka", "hasKey": "consumption.R03.fluid", "hasTopic": "vcg.gb_productionlog.ibc1"}, "5": {"property": "MtrlChangeOn", "hasProperty": "MtrlChangeOn", "hasSensor": "B4337150R03", "source": "snowflake", "hasColumn": "_Robot03_Data.MtrlChangeOn", "hasDatabase": "VCG", "hasSchema": "GB_TEST_SEQSTEP", "hasTable": "SEQSTEPS"}, "6": {"property": "MtrlChangeOn", "hasProperty": "MtrlChangeOn", "hasSensor": "B4337150R03", "source": "kafka", "hasKey": "_Robot03_Data.MtrlChangeOn", "hasTopic": "vcg.gb_test_seqstep.seqsteps"}, "7": {"property": "PerfA1InCl", "hasProperty": "PerfA1InCl", "hasSensor": "B4337150R03", "source": "snowflake", "hasColumn": "_Robot03_Data.doPerfA1InCl", "hasDatabase": "VCG", "hasSchema": "GB_TEST_SEQSTEP", "hasTable": "SEQSTEPS"}, "8": {"property": "PerfA1InCl", "hasProperty": "PerfA1InCl", "hasSensor": "B4337150R03", "source": "kafka", "hasKey": "_Robot03_Data.doPerfA1InCl", "hasTopic": "vcg.gb_test_seqstep.seqsteps"}, "9": {"property": "PerfA1OutCl", "hasProperty": "PerfA1OutCl", "hasSensor": "B4337150R03", "source": "snowflake", "hasColumn": "_Robot03_Data.doPerfA1OutCl", "hasDatabase": "VCG", "hasSchema": "GB_TEST_SEQSTEP", "hasTable": "SEQSTEPS"}, "10": {"property": "PerfA1OutCl", "hasProperty": "PerfA1OutCl", "hasSensor": "B4337150R03", "source": "kafka", "hasKey": "_Robot03_Data.doPerfA1OutCl", "hasTopic": "vcg.gb_test_seqstep.seqsteps"}}, "links": []}, {"title": "B4337150R04", "id": 11, "type": "sparks/system", "sources": {"1": {"property": "Modes", "hasProperty": "Modes", "hasSensor": "B4337150R04", "source": "snowflake", "hasColumn": "modes.R04.1", "hasDatabase": "VCG", "hasSchema": "GB_PRODUCTIONLOG", "hasTable": "IBC1"}, "2": {"property": "Modes", "hasProperty": "Modes", "hasSensor": "B4337150R04", "source": "kafka", "hasKey": "modes.R04.1", "hasTopic": "vcg.gb_productionlog.ibc1"}}, "links": []}, {"title": "B4337150R05", "id": 12, "type": "sparks/system", "sources": {"1": {"property": "Modes", "hasProperty": "Modes", "hasSensor": "B4337150R05", "source": "snowflake", "hasColumn": "modes.R05.1", "hasDatabase": "VCG", "hasSchema": "GB_PRODUCTIONLOG", "hasTable": "IBC1"}, "2": {"property": "Modes", "hasProperty": "Modes", "hasSensor": "B4337150R05", "source": "kafka", "hasKey": "modes.R05.1", "hasTopic": "vcg.gb_productionlog.ibc1"}}, "links": []}, {"title": "B4337150R06", "id": 13, "type": "sparks/system", "sources": {"1": {"property": "Modes", "hasProperty": "Modes", "hasSensor": "B4337150R06", "source": "snowflake", "hasColumn": "modes.R06.1", "hasDatabase": "VCG", "hasSchema": "GB_PRODUCTIONLOG", "hasTable": "IBC1"}, "2": {"property": "Modes", "hasProperty": "Modes", "hasSensor": "B4337150R06", "source": "kafka", "hasKey": "modes.R06.1", "hasTopic": "vcg.gb_productionlog.ibc1"}}, "links": []}, {"title": "B4337150R07", "id": 14, "type": "sparks/system", "sources": {"1": {"property": "Modes", "hasProperty": "Modes", "hasSensor": "B4337150R07", "source": "snowflake", "hasColumn": "modes.R07.1", "hasDatabase": "VCG", "hasSchema": "GB_PRODUCTIONLOG", "hasTable": "IBC1"}, "2": {"property": "Modes", "hasProperty": "Modes", "hasSensor": "B4337150R07", "source": "kafka", "hasKey": "modes.R07.1", "hasTopic": "vcg.gb_productionlog.ibc1"}}, "links": []}, {"title": "B4337150R08", "id": 15, "type": "sparks/system", "sources": {"1": {"property": "CavityCleaned", "hasProperty": "CavityCleaned", "hasSensor": "B4337150R08", "source": "snowflake", "hasColumn": "_Robot08_Data.doCavityCleaned1", "hasDatabase": "VCG", "hasSchema": "GB_TEST_SEQSTEP", "hasTable": "SEQSTEPS"}, "2": {"property": "CavityCleaned", "hasProperty": "CavityCleaned", "hasSensor": "B4337150R08", "source": "kafka", "hasKey": "_Robot08_Data.doCavityCleaned1", "hasTopic": "vcg.gb_test_seqstep.seqsteps"}, "3": {"property": "FluidConsumption", "hasProperty": "FluidConsumption", "hasSensor": "B4337150R08", "source": "snowflake", "hasColumn": "consumption.R08.fluid", "hasDatabase": "VCG", "hasSchema": "GB_PRODUCTIONLOG", "hasTable": "IBC1"}, "4": {"property": "FluidConsumption", "hasProperty": "FluidConsumption", "hasSensor": "B4337150R08", "source": "kafka", "hasKey": "consumption.R08.fluid", "hasTopic": "vcg.gb_productionlog.ibc1"}, "5": {"property": "MtrlChangeOn", "hasProperty": "MtrlChangeOn", "hasSensor": "B4337150R08", "source": "snowflake", "hasColumn": "_Robot08_Data.MtrlChangeOn", "hasDatabase": "VCG", "hasSchema": "GB_TEST_SEQSTEP", "hasTable": "SEQSTEPS"}, "6": {"property": "MtrlChangeOn", "hasProperty": "MtrlChangeOn", "hasSensor": "B4337150R08", "source": "kafka", "hasKey": "_Robot08_Data.MtrlChangeOn", "hasTopic": "vcg.gb_test_seqstep.seqsteps"}, "7": {"property": "PerfA1InCl", "hasProperty": "PerfA1InCl", "hasSensor": "B4337150R08", "source": "snowflake", "hasColumn": "_Robot08_Data.doPerfA1InCl", "hasDatabase": "VCG", "hasSchema": "GB_TEST_SEQSTEP", "hasTable": "SEQSTEPS"}, "8": {"property": "PerfA1InCl", "hasProperty": "PerfA1InCl", "hasSensor": "B4337150R08", "source": "kafka", "hasKey": "_Robot08_Data.doPerfA1InCl", "hasTopic": "vcg.gb_test_seqstep.seqsteps"}, "9": {"property": "PerfA1OutCl", "hasProperty": "PerfA1OutCl", "hasSensor": "B4337150R08", "source": "snowflake", "hasColumn": "_Robot08_Data.doPerfA1OutCl", "hasDatabase": "VCG", "hasSchema": "GB_TEST_SEQSTEP", "hasTable": "SEQSTEPS"}, "10": {"property": "PerfA1OutCl", "hasProperty": "PerfA1OutCl", "hasSensor": "B4337150R08", "source": "kafka", "hasKey": "_Robot08_Data.doPerfA1OutCl", "hasTopic": "vcg.gb_test_seqstep.seqsteps"}}, "links": []}, {"title": "B4337150R09", "id": 16, "type": "sparks/system", "sources": {"1": {"property": "CavityCleaned", "hasProperty": "CavityCleaned", "hasSensor": "B4337150R09", "source": "snowflake", "hasColumn": "_Robot09_Data.doCavityCleaned1", "hasDatabase": "VCG", "hasSchema": "GB_TEST_SEQSTEP", "hasTable": "SEQSTEPS"}, "2": {"property": "CavityCleaned", "hasProperty": "CavityCleaned", "hasSensor": "B4337150R09", "source": "kafka", "hasKey": "_Robot09_Data.doCavityCleaned1", "hasTopic": "vcg.gb_test_seqstep.seqsteps"}, "3": {"property": "FluidConsumption", "hasProperty": "FluidConsumption", "hasSensor": "B4337150R09", "source": "snowflake", "hasColumn": "consumption.R09.fluid", "hasDatabase": "VCG", "hasSchema": "GB_PRODUCTIONLOG", "hasTable": "IBC1"}, "4": {"property": "FluidConsumption", "hasProperty": "FluidConsumption", "hasSensor": "B4337150R09", "source": "kafka", "hasKey": "consumption.R09.fluid", "hasTopic": "vcg.gb_productionlog.ibc1"}, "5": {"property": "MtrlChangeOn", "hasProperty": "MtrlChangeOn", "hasSensor": "B4337150R09", "source": "snowflake", "hasColumn": "_Robot09_Data.MtrlChangeOn", "hasDatabase": "VCG", "hasSchema": "GB_TEST_SEQSTEP", "hasTable": "SEQSTEPS"}, "6": {"property": "MtrlChangeOn", "hasProperty": "MtrlChangeOn", "hasSensor": "B4337150R09", "source": "kafka", "hasKey": "_Robot09_Data.MtrlChangeOn", "hasTopic": "vcg.gb_test_seqstep.seqsteps"}, "7": {"property": "PerfA1InCl", "hasProperty": "PerfA1InCl", "hasSensor": "B4337150R09", "source": "snowflake", "hasColumn": "_Robot09_Data.doPerfA1InCl", "hasDatabase": "VCG", "hasSchema": "GB_TEST_SEQSTEP", "hasTable": "SEQSTEPS"}, "8": {"property": "PerfA1InCl", "hasProperty": "PerfA1InCl", "hasSensor": "B4337150R09", "source": "kafka", "hasKey": "_Robot09_Data.doPerfA1InCl", "hasTopic": "vcg.gb_test_seqstep.seqsteps"}, "9": {"property": "PerfA1OutCl", "hasProperty": "PerfA1OutCl", "hasSensor": "B4337150R09", "source": "snowflake", "hasColumn": "_Robot09_Data.doPerfA1OutCl", "hasDatabase": "VCG", "hasSchema": "GB_TEST_SEQSTEP", "hasTable": "SEQSTEPS"}, "10": {"property": "PerfA1OutCl", "hasProperty": "PerfA1OutCl", "hasSensor": "B4337150R09", "source": "kafka", "hasKey": "_Robot09_Data.doPerfA1OutCl", "hasTopic": "vcg.gb_test_seqstep.seqsteps"}}, "links": []}, {"title": "B4337150R10", "id": 17, "type": "sparks/system", "sources": {"1": {"property": "Modes", "hasProperty": "Modes", "hasSensor": "B4337150R10", "source": "snowflake", "hasColumn": "modes.R10.1", "hasDatabase": "VCG", "hasSchema": "GB_PRODUCTIONLOG", "hasTable": "IBC1"}, "2": {"property": "Modes", "hasProperty": "Modes", "hasSensor": "B4337150R10", "source": "kafka", "hasKey": "modes.R10.1", "hasTopic": "vcg.gb_productionlog.ibc1"}}, "links": []}]}}]}}]}}]}
    # """
    data = json.loads(text)
    namespaces = {
        "folio":  "http://IBCNServices.github.io/Folio-Ontology/Folio.owl#",
        "ssn":  "http://www.w3.org/ns/ssn/",
        "sosa": "http://www.w3.org/ns/sosa/",
        "sparks": "https://sparks.idlab.ugent.be/",
        "base" : "https://www.example.com/sparks/"
        }

    kg = kglab.KnowledgeGraph(
        name = "A volvo procedure KG example",
        namespaces = namespaces,
        )
    
    common_components = {
    'sparks/system': kg.get_ns("ssn").system,
    'sparks/sensor': kg.get_ns("sosa").sensor,
    'sparks/procedure': kg.get_ns("sparks").procedure,
    'sparks/process': kg.get_ns("sparks").process
    }

    common_relations = {
        'sparks/system': kg.get_ns("ssn").hasSubSystem,
        'sparks/process': kg.get_ns("sparks").contains
    }

    node_dct = {}

    def create_node(n, p, p_type, links):
        #node_A = rdflib.URIRef("http://10.63.126.170:31886/things/{}".format(n['id']))
        #kg.add(node, kg.get_ns("rdf").type, common_components[n['type']])
        #kg.add(node, kg.get_ns("rdf").description, rdflib.Literal(n['title']))
        node = rdflib.URIRef("https://www.example.com/{}/{}".format(n['type'],n['id']))
        kg.add(node, kg.get_ns("rdf").type, common_components[n['type']])
        kg.add(node, kg.get_ns("rdf").description, rdflib.Literal(n['title']))
        node_dct[n['id']] = common_components[n['type']]

        if "sources" in n:
            for s in n["sources"]:
                property_source = rdflib.URIRef("http://10.63.126.170:31886/things/{}/properties/{}".format(n['title'],n["sources"][s]["property"]))
                kg.add(property_source,  kg.get_ns("rdf").type, kg.get_ns("sosa").ObservableProperty)
                kg.add(property_source, URIRef('https://dynamicdashboard.ilabt.imec.be/broker/ontologies/ddashboard#produces'), mapping[n["sources"][s]["property"]])
                kg.add(node,kg.get_ns("ssn").observes,property_source)
                
                
                if n["sources"][s]['source'] == 'snowflake':
                    source = rdflib.URIRef("http://10.63.126.170:31886/things/{}{}{}HistoricalDataSource".format(n["sources"][s]["hasSensor"],n["sources"][s]['hasSchema'],n["sources"][s]['hasProperty']))
                    kg.add(source, kg.get_ns("rdf").type, rdflib.URIRef('https://dynamicdashboard.ilabt.imec.be/broker/ontologies/ddashboard#SnowflakeDataSource'))
                    kg.add(source, kg.get_ns("rdf").type, schemas[n["sources"][s]['hasSchema']])
                    
                    kg.add(source, rdflib.URIRef('https://dynamicdashboard.ilabt.imec.be/broker/ontologies/ddashboard#hasSensor'), node)
                    kg.add(source, rdflib.URIRef('https://dynamicdashboard.ilabt.imec.be/broker/ontologies/ddashboard#hasProperty'), property_source)

                    kg.add(source, rdflib.URIRef('https://dynamicdashboard.ilabt.imec.be/broker/ontologies/ddashboard#hasSchema'), rdflib.Literal(n["sources"][s]['hasSchema']))
                    kg.add(source, rdflib.URIRef('https://dynamicdashboard.ilabt.imec.be/broker/ontologies/ddashboard#hasTable'), rdflib.Literal(n["sources"][s]['hasTable']))
                    kg.add(source, rdflib.URIRef('https://dynamicdashboard.ilabt.imec.be/broker/ontologies/ddashboard#hasDatabase'), rdflib.Literal(n["sources"][s]['hasDatabase']))
                    kg.add(source, rdflib.URIRef('https://dynamicdashboard.ilabt.imec.be/broker/ontologies/ddashboard#hasColumn'), rdflib.Literal(n["sources"][s]['hasColumn']))
                    
                    

                if n["sources"][s]['source'] == 'kafka':
                    source = rdflib.URIRef("http://10.63.126.170:31886/things/{}{}{}StreamingDataSource".format(n["sources"][s]["hasSensor"],schemas[n["sources"][s]['hasTopic'].split('.')[1].upper()],n["sources"][s]['hasProperty']))
                    kg.add(source, kg.get_ns("rdf").type, rdflib.URIRef('https://dynamicdashboard.ilabt.imec.be/broker/ontologies/ddashboard#SnowflakeDataSource'))
                    kg.add(source, kg.get_ns("rdf").type, schemas[n["sources"][s]['hasTopic'].split('.')[1].upper()])
                    
                    kg.add(source, rdflib.URIRef('https://dynamicdashboard.ilabt.imec.be/broker/ontologies/ddashboard#hasSensor'), node)
                    kg.add(source, rdflib.URIRef('https://dynamicdashboard.ilabt.imec.be/broker/ontologies/ddashboard#hasProperty'), property_source)

                    kg.add(source, rdflib.URIRef('https://dynamicdashboard.ilabt.imec.be/broker/ontologies/ddashboard#hasTopic'), rdflib.Literal(n["sources"][s]['hasTopic']))
                    kg.add(source, rdflib.URIRef('https://dynamicdashboard.ilabt.imec.be/broker/ontologies/ddashboard#hasKey'), rdflib.Literal(n["sources"][s]['hasKey']))
        
        if "fault_table" in n:
            for i in range(len(n["fault_table"])):
                if n["fault_table"][i]['fault'] != "Enter Fault":
                    f_node = rdflib.URIRef("https://www.example.com/{}/{}/fault/{}".format(n['type'], n['id'], i+1))
                    kg.add(f_node, kg.get_ns("rdf").type, kg.get_ns("folio").FailureEffect)
                    kg.add(f_node, kg.get_ns("rdfs").label, rdflib.Literal(n["fault_table"][i]['fault']))
                    kg.add(f_node, kg.get_ns("folio").happenedAt, node)
                    
                    c_node = rdflib.URIRef("https://www.example.com/{}/{}/cause/{}".format(n['type'], n['id'], i+1))
                    kg.add(c_node, kg.get_ns("rdf").type, kg.get_ns("folio").FailureCause)
                    kg.add(c_node, kg.get_ns("rdfs").label, rdflib.Literal(n["fault_table"][i]['cause']))
                    kg.add(f_node, kg.get_ns("folio").hasCause, c_node)
                    
                    m_node = rdflib.URIRef("https://www.example.com/{}/{}/mitigation/{}".format(n['type'], n['id'], i+1))
                    kg.add(m_node, kg.get_ns("rdf").type, kg.get_ns("folio").Mitigation)
                    kg.add(m_node, kg.get_ns("rdfs").label, rdflib.Literal(n["fault_table"][i]['mitigation']))
                    kg.add(f_node, kg.get_ns("folio").hasMitigation, m_node)
        
        if 'inputs' in n:
            if 'procedure' in n['type']:
                for _in in n['inputs']:
                    if _in['name'] != "in":
                        if 'links' in _in and _in['links'] is not None:
                            if isinstance(_in['link'], list):
                                for l in _in['link']:
                                    rule = links[l]
                                    property_node = rdflib.URIRef("https://www.example.com/{}/{}/processinput/{}".format(n['type'],  n['id'], rule[4]))
                                    kg.add(property_node,kg.get_ns("rdfs").type, kg.get_ns("sparks").ProcessInput)
                                    kg.add(property_node,kg.get_ns("sparks").isProcessInputOf, node)
                                    kg.add(property_node, kg.get_ns("rdfs").label, rdflib.Literal(_in['name']))

                        if 'link' in _in:
                            if isinstance(_in['link'], int):
                                rule = links[_in['link']]
                                property_node = rdflib.URIRef("https://www.example.com/{}/{}/processinput/{}".format(n['type'],  n['id'], rule[4]))
                                kg.add(property_node,kg.get_ns("rdfs").type, kg.get_ns("sparks").ProcessInput)
                                kg.add(property_node,kg.get_ns("sparks").isProcessInputOf, node)
                                kg.add(property_node, kg.get_ns("rdfs").label, rdflib.Literal(_in['name']))
                            
            elif 'system' in n['type'] or 'sensor' in n['type']:
                for _in in n['inputs']:
                    if 'links' in _in  and _in['links'] is not None:
                        for l in _in['links']:
                            rule = links[l]
                            input_node = rdflib.URIRef("https://www.example.com/{}/{}/actuatableproperty/{}".format(n['type'],  n['id'], rule[4]))
                            kg.add(node, kg.get_ns("ssn").actsOnProperty, input_node)
                            kg.add(input_node, kg.get_ns("rdf").type, kg.get_ns("sosa").ActuatableProperty)
                            kg.add(input_node, kg.get_ns("rdfs").label, rdflib.Literal(_in['name']))
                    if "link" in _in:
                        if isinstance(_in['link'], int):
                            rule = links[_in['link']]
                            input_node = rdflib.URIRef("https://www.example.com/{}/{}/actuatableproperty/{}".format(n['type'],  n['id'], rule[4]))
                            kg.add(node, kg.get_ns("ssn").actsOnProperty, input_node)
                            kg.add(input_node, kg.get_ns("rdf").type, kg.get_ns("sosa").ActuatableProperty)
                            kg.add(input_node, kg.get_ns("rdfs").label, rdflib.Literal(_in['name']))

        if 'outputs' in n:
            if 'procedure' in n['type']:
                for _out in n['outputs']:
                    if _out['name'] != "out" or "Call_" in _out['name']:
                        if 'links' in _out and _out['links'] is not None:
                            if isinstance(_out['links'], list):
                                for l in _out['links']:
                                    rule = links[l]
                                    property_node = rdflib.URIRef("https://www.example.com/{}/{}/processoutput/{}".format(n['type'],  n['id'], rule[2]))
                                    kg.add(property_node,kg.get_ns("rdfs").type, kg.get_ns("sparks").ProcessOutput)
                                    kg.add(property_node,kg.get_ns("sparks").isProcessOutputOf, node)
                                    kg.add(property_node, kg.get_ns("rdfs").label, rdflib.Literal(_out['name']))

                        if 'link' in _out:
                            if isinstance(_out['link'], int):
                                rule = links[_out['link']]
                                property_node = rdflib.URIRef("https://www.example.com/{}/{}/processoutput/{}".format(n['type'],  n['id'], rule[2]))
                                kg.add(property_node,kg.get_ns("rdfs").type, kg.get_ns("sparks").ProcessOutput)
                                kg.add(property_node,kg.get_ns("sparks").isProcessOutputOf, node)
                                kg.add(property_node, kg.get_ns("rdfs").label, rdflib.Literal(_out['name']))
                            
            elif 'system' in n['type'] or 'sensor' in n['type']:
                for _out in n['outputs']:
                    if 'links' in _out  and _out['links'] is not None:
                        for l in _out['links']:
                            rule = links[l]
                            output_node = rdflib.URIRef("https://www.example.com/{}/{}/observableproperty/{}".format(n['type'],  n['id'], rule[2]))
                            kg.add(node, kg.get_ns("ssn").observes, output_node)
                            kg.add(output_node, kg.get_ns("rdf").type, kg.get_ns("sosa").ObservableProperty)
                            kg.add(output_node, kg.get_ns("rdfs").label, rdflib.Literal(_out['name']))
                    if "link" in _out:
                        if isinstance(_out['link'], int):
                            rule = links[_out['link']]
                            output_node = rdflib.URIRef("https://www.example.com/{}/{}/observableproperty/{}".format(n['type'],  n['id'], rule[2]))
                            kg.add(node, kg.get_ns("ssn").observes, output_node)
                            kg.add(output_node, kg.get_ns("rdf").type, kg.get_ns("sosa").ObservableProperty)
                            kg.add(output_node, kg.get_ns("rdfs").label, rdflib.Literal(_out['name']))

        if p is not None:
            kg.add(p, common_relations[p_type], node)
            

        if 'subgraph' in n:
            if False:
                sub_links = {d[0]:d for d in n['subgraph']['links']}
                for s in n['subgraph']['nodes']:
                    create_node(s, node, n['type'], sub_links)
                create_links(n['subgraph']['links'])
        
        return
    
    def create_links(links):
            for l in links:
                if 'system' in node_dct[l[1]]:
                    if 'procedure' in node_dct[l[3]]:
                        output_node = rdflib.URIRef("https://www.example.com/sparks/system/{}/observableproperty/{}".format(l[1], l[2]))
                        input_node = rdflib.URIRef("https://www.example.com/sparks/procedure/{}/processinput/{}".format(l[3], l[4]))
                        kg.add(output_node, kg.get_ns("sparks").propertyLinkedTo, input_node)
                if 'procedure' in node_dct[l[1]]:
                    if 'system' in node_dct[l[3]]:
                        output_node = rdflib.URIRef("https://www.example.com/sparks/procedure/{}/processoutput/{}".format(l[1], l[2]))
                        input_node = rdflib.URIRef("https://www.example.com/sparks/system/{}/actuatableproperty/{}".format(l[3], l[4]))
                        kg.add(input_node, kg.get_ns("sparks").propertyLinkedTo, output_node)
                    if 'process' in node_dct[l[3]]:
                        output_node = rdflib.URIRef("https://www.example.com/sparks/procedure/{}".format(l[1]))
                        input_node = rdflib.URIRef("https://www.example.com/sparks/process/{}".format(l[3]))
                        kg.add(input_node, kg.get_ns("sparks").hasProcedure, output_node)
                        kg.add(output_node, kg.get_ns("sparks").calls, input_node)
                    if 'procedure' in node_dct[l[3]]:
                        output_node = rdflib.URIRef("https://www.example.com/sparks/procedure/{}".format(l[1]))
                        input_node = rdflib.URIRef("https://www.example.com/sparks/procedure/{}".format(l[3]))
                        kg.add(output_node, kg.get_ns("sparks").hasNextProcedure, input_node)
                        #kg.add(input_node, kg.get_ns("sparks").hasPreviousPrecudre, output_node)
                        


                #print(node_dct[l[1]], node_dct[l[3]])
        
        #if 'title' in n:
        #    kg.add(node, kg.get_ns('sparks').hasTitle, rdflib.Literal(n['title']))
        
        #if 'description' in n:
        #    kg.add(node, kg.get_ns('sparks').hasDescription, rdflib.Literal(n['description']))


        
    
    if "links" not in data:
        data["links"] = []
    for n in data['nodes']:
        create_node(n, None, None, {d[0]:d for d in data["links"]})
    create_links(data["links"])


    
    ttl = kg.save_rdf_text()
    kg.save_rdf("test_graph.ttl", format="ttl")
    print("Content-type: text/html")
    print(ttl)

    #headers = {'Content-Type': 'text/turtle;charset=utf-8'}
    #r = requests.post('http://localhost:3030/volvo/data?default', data=ttl, headers=headers)
    #print(r.text)
    return ttl
main()
